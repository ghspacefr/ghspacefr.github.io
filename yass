#!/usr/bin/env python

import os
import re

import yaml
import shutil

import xml.etree.ElementTree as ET

from datetime import datetime
from markdown import markdown
from collections import defaultdict
from jinja2 import Environment, FileSystemLoader, Template

CONTENT_DIR         = os.environ.get('CONTENT_DIR', 'content')
TEMPLATE_DIR        = os.environ.get('TEMPLATE_DIR', 'template')
PUBLIC_DIR          = os.environ.get('PUBLIC_DIR', 'public')
STATIC_DIR          = os.environ.get('STATIC_DIR', 'static')
BASE_TEMPLATE       = os.environ.get('BASE_TEMPLATE', 'base.html')
CONFIG_FILE         = os.environ.get('CONFIG_FILE', 'config.yaml')

def parse_content(content):
    regex = re.compile(r'^---\s*([\s\S]*?)\s*---', re.MULTILINE)
    match = regex.search(content)
    page  = {}
    if not match: return content.strip()
    page.update(yaml.safe_load(match.group(1)))
    return page, content[len(match.group(0)):].strip()

def get_pages(path):
    pages = defaultdict(list)
    for root,_,files in os.walk(path):
        subdir = os.path.normpath(os.path.relpath(root, path))
        if subdir == ".": subdir = ""
        for filename in files:
           if not filename.endswith(".md"): continue
           filepath = os.path.join(path, subdir, filename)
           with open(filepath, 'r') as f:
                page, content = parse_content(f.read())
                page["filename"] = filename
                page["subpath"] = os.path.join(subdir, filename.replace(".md", ".html"))
                page["content"] = content
                page.setdefault("template", "base.html")
                pages[subdir].append(page)
    return pages

def render_content(content, kwargs):
    t = Template(content)
    return t.render(**kwargs)
    
def render_page(page, env, kwargs):
    t = env.get_template(page["template"])
    return t.render(**kwargs)

def get_config(path):
    with open(path, "r") as f:
        return yaml.safe_load(f.read())

def build_pages(site, pages):

    print(f"[{datetime.now().isoformat()}] Building pages.....")

    if not os.path.exists(PUBLIC_DIR): os.makedirs(PUBLIC_DIR)

    env = Environment(loader=FileSystemLoader(TEMPLATE_DIR))
    env.filters["markdown"] = markdown
    
    for subdir, subpages in pages.items():
 
        for page in subpages:
        
            kwargs = { 
                "site": site,
                "pages": pages, 
                "page": page
            }
           
            page["content"] = render_content(page["content"], kwargs)

            html = render_page(page, env, kwargs)
            path = os.path.normpath(os.path.join(PUBLIC_DIR, page["subpath"]))
            
            if not os.path.exists(os.path.dirname(path)):
                os.makedirs(os.path.dirname(path))

            with open(path, 'w') as f:
                f.write(html)

def gen_sitemap(site, pages):
    print(f"[{datetime.now().isoformat()}] Generating sitemap...")

    urlset = ET.Element('urlset', xmlns="http://www.sitemaps.org/schemas/sitemap/0.9")

    filename = site.get("sitemap", "sitemap.xml")
    filepath = os.path.normpath(os.path.join(PUBLIC_DIR, filename))
    
    for subdir, subpages in pages.items():
        for page in subpages:
          url = os.path.normpath(os.path.join(site["url"], page['subpath']))
          print(f"    {url}")
          url_element = ET.SubElement(urlset, 'url')
          loc = ET.SubElement(url_element, 'loc')
          loc.text = url
          lastmod = ET.SubElement(url_element, 'lastmod')
          lastmod.text = datetime.now().strftime('%Y-%m-%d')
          changefreq = ET.SubElement(url_element, 'changefreq')
          changefreq.text = 'daily'
          priority = ET.SubElement(url_element, 'priority')
          priority.text = '0.8'

    tree = ET.ElementTree(urlset)
    tree.write(filepath, encoding='utf-8', xml_declaration=True)

def copy_static():
    print(f"[{datetime.now().isoformat()}] Copying {STATIC_DIR} into {PUBLIC_DIR}...")
    shutil.copytree(STATIC_DIR,
        os.path.join(PUBLIC_DIR,STATIC_DIR),
        dirs_exist_ok=True)

if __name__ == "__main__":

    pages = get_pages(CONTENT_DIR)
    site = get_config(CONFIG_FILE)
    
    site.update({ "last_update": datetime.now().isoformat() })

    build_pages(site, pages)
    gen_sitemap(site, pages)
        
    copy_static()

    print(f"[{datetime.now().isoformat()}] All Done!")
